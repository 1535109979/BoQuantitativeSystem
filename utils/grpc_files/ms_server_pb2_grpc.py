# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from BoQuantitativeSystem.grpc_files import ms_server_pb2 as ms__server__pb2


class AsyncMarketServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubQuoteStream = channel.unary_stream(
                '/AsyncMarketServer/SubQuoteStream',
                request_serializer=ms__server__pb2.Symbols.SerializeToString,
                response_deserializer=ms__server__pb2.Quote.FromString,
                )
        self.SubAccount = channel.unary_unary(
                '/AsyncMarketServer/SubAccount',
                request_serializer=ms__server__pb2.AccountType.SerializeToString,
                response_deserializer=ms__server__pb2.FlagReply.FromString,
                )
        self.AddSubscribe = channel.unary_unary(
                '/AsyncMarketServer/AddSubscribe',
                request_serializer=ms__server__pb2.Symbols.SerializeToString,
                response_deserializer=ms__server__pb2.FlagReply.FromString,
                )
        self.StopEngine = channel.unary_unary(
                '/AsyncMarketServer/StopEngine',
                request_serializer=ms__server__pb2.FlagReply.SerializeToString,
                response_deserializer=ms__server__pb2.FlagReply.FromString,
                )


class AsyncMarketServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubQuoteStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddSubscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopEngine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AsyncMarketServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubQuoteStream': grpc.unary_stream_rpc_method_handler(
                    servicer.SubQuoteStream,
                    request_deserializer=ms__server__pb2.Symbols.FromString,
                    response_serializer=ms__server__pb2.Quote.SerializeToString,
            ),
            'SubAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.SubAccount,
                    request_deserializer=ms__server__pb2.AccountType.FromString,
                    response_serializer=ms__server__pb2.FlagReply.SerializeToString,
            ),
            'AddSubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSubscribe,
                    request_deserializer=ms__server__pb2.Symbols.FromString,
                    response_serializer=ms__server__pb2.FlagReply.SerializeToString,
            ),
            'StopEngine': grpc.unary_unary_rpc_method_handler(
                    servicer.StopEngine,
                    request_deserializer=ms__server__pb2.FlagReply.FromString,
                    response_serializer=ms__server__pb2.FlagReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AsyncMarketServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AsyncMarketServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubQuoteStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AsyncMarketServer/SubQuoteStream',
            ms__server__pb2.Symbols.SerializeToString,
            ms__server__pb2.Quote.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AsyncMarketServer/SubAccount',
            ms__server__pb2.AccountType.SerializeToString,
            ms__server__pb2.FlagReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddSubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AsyncMarketServer/AddSubscribe',
            ms__server__pb2.Symbols.SerializeToString,
            ms__server__pb2.FlagReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopEngine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AsyncMarketServer/StopEngine',
            ms__server__pb2.FlagReply.SerializeToString,
            ms__server__pb2.FlagReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
